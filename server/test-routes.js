const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testRoutes() {
  let adminToken = '';
  let userToken = '';
  let userId = '';

  console.log('üöÄ Testando rotas da API Conectar...\n');

  try {
    // 1. Teste de registro - usar email √∫nico
    console.log('1. Testando registro de usu√°rio...');
    const timestamp = Date.now();
    const registerResponse = await axios.post(`${BASE_URL}/auth/register`, {
      name: 'Test User',
      email: `testuser${timestamp}@example.com`,
      password: 'password123',
      role: 'user'
    });
    console.log('‚úÖ Registro realizado com sucesso:', registerResponse.data);
    userId = registerResponse.data.id;

    // 2. Login do admin
    console.log('\n2. Testando login do admin...');
    const adminLogin = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@conectar.com',
      password: 'admin123'
    });
    console.log('‚úÖ Login admin realizado com sucesso');
    console.log('Token:', adminLogin.data.access_token.substring(0, 50) + '...');
    adminToken = adminLogin.data.access_token;

    // 3. Login do usu√°rio
    console.log('\n3. Testando login do usu√°rio...');
    const userLogin = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'user1@exemplo.com',
      password: 'user123'
    });
    console.log('‚úÖ Login usu√°rio realizado com sucesso');
    userToken = userLogin.data.access_token;

    // 4. Listar todos os usu√°rios (admin)
    console.log('\n4. Testando listagem de usu√°rios (admin)...');
    const users = await axios.get(`${BASE_URL}/users`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Listagem de usu√°rios:', users.data.length, 'usu√°rios encontrados');

    // 5. Filtrar usu√°rios por role
    console.log('\n5. Testando filtro por role...');
    const adminUsers = await axios.get(`${BASE_URL}/users?role=admin`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Filtro por role:', adminUsers.data.length, 'admins encontrados');

    // 6. Usu√°rios inativos
    console.log('\n6. Testando busca de usu√°rios inativos...');
    const inactiveUsers = await axios.get(`${BASE_URL}/users/inactive`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Usu√°rios inativos:', inactiveUsers.data.length, 'usu√°rios inativos');

    // 7. Perfil do usu√°rio
    console.log('\n7. Testando perfil do usu√°rio...');
    const profile = await axios.get(`${BASE_URL}/users/profile`, {
      headers: { Authorization: `Bearer ${userToken}` }
    });
    console.log('‚úÖ Perfil do usu√°rio:', profile.data.name);

    // 8. Criar usu√°rio (admin)
    console.log('\n8. Testando cria√ß√£o de usu√°rio (admin)...');
    const newUser = await axios.post(`${BASE_URL}/users`, {
      name: 'Novo Usu√°rio',
      email: 'novo@example.com',
      password: 'password123',
      role: 'user'
    }, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Usu√°rio criado:', newUser.data.name);

    // 9. Buscar usu√°rio por ID (admin)
    console.log('\n9. Testando busca por ID...');
    const userById = await axios.get(`${BASE_URL}/users/${newUser.data.id}`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Usu√°rio encontrado:', userById.data.name);

    // 10. Atualizar usu√°rio
    console.log('\n10. Testando atualiza√ß√£o de usu√°rio...');
    const updatedUser = await axios.patch(`${BASE_URL}/users/${newUser.data.id}`, {
      name: 'Usu√°rio Atualizado'
    }, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Usu√°rio atualizado:', updatedUser.data.name);

    // 11. Deletar usu√°rio (admin)
    console.log('\n11. Testando exclus√£o de usu√°rio...');
    await axios.delete(`${BASE_URL}/users/${newUser.data.id}`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    console.log('‚úÖ Usu√°rio deletado com sucesso');

    console.log('\nüéâ Todos os testes passaram! API funcionando corretamente.');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error('Status:', error.response.status);
    }
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  testRoutes();
}

module.exports = { testRoutes };